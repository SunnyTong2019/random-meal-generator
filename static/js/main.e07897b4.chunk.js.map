{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","meal","mealVideo","mealIngredients","handleGetMeal","axios","get","then","res","videoStr","data","meals","strYoutube","index","indexOf","videoID","slice","mealIngreArr","i","strIngre","strMeasure","push","setState","catch","err","console","log","className","onClick","this","Object","keys","length","strMeal","width","height","src","strMealThumb","alt","strCategory","strArea","strTags","map","ingre","key","id","strInstructions","title","frameBorder","allow","allowFullScreen","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"oVA4FeA,E,2MAtFbC,MAAQ,CACNC,KAAM,GACNC,UAAW,GACXC,gBAAiB,I,EAGnBC,cAAgB,WACdC,IAAMC,IAAI,kDACPC,MAAK,SAAAC,GAOJ,IANA,IAAIC,EAAWD,EAAIE,KAAKC,MAAM,GAAGC,WAC7BC,EAAQJ,EAASK,QAAQ,MACzBC,EAAUN,EAASO,MAAMH,EAAQ,GAEjCI,EAAe,GAEVC,EAAI,EAAGA,GAAK,GAAIA,IAAK,CAC5B,IAAIC,EAAW,gBAAkBD,EAC7BE,EAAa,aAAeF,EAC5BV,EAAIE,KAAKC,MAAM,GAAGQ,KAKpBX,EAAIE,KAAKC,MAAM,GAAGS,GAAcH,EAAaI,KAAKb,EAAIE,KAAKC,MAAM,GAAGQ,GAAY,MAAQX,EAAIE,KAAKC,MAAM,GAAGS,IACtGH,EAAaI,KAAKb,EAAIE,KAAKC,MAAM,GAAGQ,KAI5C,EAAKG,SAAS,CACZrB,KAAMO,EAAIE,KAAKC,MAAM,GACrBT,UAAWa,EACXZ,gBAAiBc,OAGpBM,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,wEAI5B,OAAQ,yBAAKG,UAAU,oBAErB,yBAAKA,UAAU,eACb,sDAGF,yBAAKA,UAAU,aACb,wBAAIA,UAAU,cAAd,2BACA,uBAAGA,UAAU,aAAb,2EACA,4BAAQA,UAAU,kBAAkBC,QAASC,KAAKzB,eAAlD,aAGuC,IAAxC0B,OAAOC,KAAKF,KAAK7B,MAAMC,MAAM+B,OAC5B,yBAAKL,UAAU,eACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,cAAcE,KAAK7B,MAAMC,KAAKgC,SAE5C,yBAAKC,MAAM,MAAMC,OAAO,MAAMC,IAAKP,KAAK7B,MAAMC,KAAKoC,aAAcC,IAAI,OAAOX,UAAU,SAEtF,2BAAG,8CAA4BE,KAAK7B,MAAMC,KAAKsC,aAE/C,2BAAG,0CAAwBV,KAAK7B,MAAMC,KAAKuC,SAE1CX,KAAK7B,MAAMC,KAAKwC,QAAU,2BAAG,0CAAwBZ,KAAK7B,MAAMC,KAAKwC,SAAe,KAErF,2BAAG,iDACH,4BACGZ,KAAK7B,MAAMG,gBAAgBuC,KAAI,SAACC,EAAO9B,GAAR,OAAkB,wBAAI+B,IAAK/B,EAAQ,GAAI8B,OAGzE,2BAAG,0DACH,uBAAGE,GAAG,gBAAgBhB,KAAK7B,MAAMC,KAAK6C,iBAErCjB,KAAK7B,MAAME,UAAa,6BAAK,2BAAG,kDAC/B,4BAAQgC,MAAM,MAAMC,OAAO,MAAMY,MAAM,gBAAgBX,IAAK,iCAAmCP,KAAK7B,MAAME,UACxG8C,YAAY,IAAIC,MAAM,0EAA0EC,iBAAe,KAAoB,QAI3I,U,GA/EQC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxD,MAAK,SAAAyD,GACJA,EAAaC,gBAEd1C,OAAM,SAAA2C,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.e07897b4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport axios from \"axios\";\n\n\nclass App extends Component {\n  state = {\n    meal: {},\n    mealVideo: \"\",\n    mealIngredients: []\n  };\n\n  handleGetMeal = () => {\n    axios.get(\"https://themealdb.com/api/json/v1/1/random.php\")\n      .then(res => {\n        let videoStr = res.data.meals[0].strYoutube;\n        let index = videoStr.indexOf(\"v=\");\n        let videoID = videoStr.slice(index + 2);\n\n        let mealIngreArr = [];\n\n        for (let i = 1; i <= 20; i++) {\n          let strIngre = \"strIngredient\" + i;\n          let strMeasure = \"strMeasure\" + i;\n          if (res.data.meals[0][strIngre]) {\n            // if (res.data.meals[0][strMeasure]) { mealIngreArr.push(res.data.meals[0][strIngre] + \" - \" + res.data.meals[0][strMeasure]); }\n            // else {\n            //   mealIngreArr.push(res.data.meals[0][strIngre])\n            // }\n            res.data.meals[0][strMeasure] ? mealIngreArr.push(res.data.meals[0][strIngre] + \" - \" + res.data.meals[0][strMeasure])\n              : mealIngreArr.push(res.data.meals[0][strIngre])\n          }\n        }\n\n        this.setState({\n          meal: res.data.meals[0],\n          mealVideo: videoID,\n          mealIngredients: mealIngreArr\n        });\n      })\n      .catch(err => console.log(err));\n  };\n\n  render() {\n    return (<div className=\"card text-center\">\n\n      <div className=\"card-header\">\n        <h1>Random Meal Generator</h1>\n      </div>\n\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">Don't know what to eat?</h5>\n        <p className=\"card-text\">Click button below to generate a random meal with cooking instructions.</p>\n        <button className=\"btn btn-primary\" onClick={this.handleGetMeal}>Get Meal</button>\n      </div>\n\n      {Object.keys(this.state.meal).length !== 0 ? (\n        <div className=\"card-footer\">\n          <div className=\"card mb-3\">\n            <div className=\"card-body\">\n              <h4 className=\"card-title\">{this.state.meal.strMeal}</h4>\n\n              <img width=\"30%\" height=\"315\" src={this.state.meal.strMealThumb} alt=\"meal\" className=\"mb-4\" />\n\n              <p><strong>Category: </strong>{this.state.meal.strCategory}</p>\n\n              <p><strong>Area: </strong>{this.state.meal.strArea}</p>\n\n              {this.state.meal.strTags ? <p><strong>Tags: </strong>{this.state.meal.strTags}</p> : null}\n\n              <p><strong>Ingredients:</strong></p>\n              <ul>\n                {this.state.mealIngredients.map((ingre, index) => <li key={index + 1}>{ingre}</li>)}\n              </ul>\n\n              <p><strong>Cooking Instructions:</strong></p>\n              <p id=\"instructions\">{this.state.meal.strInstructions}</p>\n\n              {this.state.mealVideo ? (<div><p><strong>Video Recipe:</strong></p>\n                <iframe width=\"30%\" height=\"315\" title=\"video receipt\" src={\"https://www.youtube.com/embed/\" + this.state.mealVideo}\n                  frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe></div>) : null}\n            </div>\n          </div>\n        </div>)\n        : null\n      }\n\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}